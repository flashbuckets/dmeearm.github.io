<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sébastien Saunier - Blog</title>
    <description>On Software Engineering, Lean Startup, Agile and Productivity</description>
    <link>http://sebastien.saunier.me</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>缓存服务器设计与实现(一)</title>
      <description>&lt;p&gt;这里我们nginx的cache系统为线索，来探讨一个缓存服务器的设计和相关细节，我尽量站在设计和框架的角度来分析，限于篇幅这里不再去撸代码了，相关的细节，欢迎大家一起参与讨论。&lt;/p&gt;

&lt;p&gt;一个cache服务器中从后端取得文件之后，要么直接发送给客户端(学名叫透传)，要么缓存在本地，后续相同的请求访问到cache服务器时，就可以直接拿本地的拷贝来用了，如果可以用的话。如果本地缓存的文件被后续的请求访问到，在cache中叫做命中(即Hit)。如果本地还没有文件的缓存拷贝，那么cache服务器需要根据配置或者做解析域名，去后端获取文件，这时称为缓存miss，即未命中。关于cache服务器更多的知识，我们在分析nginx的缓存系统时再深入讨论。&lt;/p&gt;

&lt;p&gt;nginx的存储系统分两类，一类是通过proxy_store开启的，存储方式是按照url中的文件路径，存储在本地。比如/file/2013/0001/en/test.html，那么nginx就会在指定的存储目录下依次建立各个目录和文件。另一类是通过proxy_cache开启，这种方式存储的文件不是按照url路径来组织的，而是使用一些特殊方式来管理的(这里称为自定义方式)，自定义方式就是我们要重点分析的。那么这两种方式各有什么优势呢？&lt;/p&gt;

&lt;p&gt;按url路径存储文件的方式，程序处理起来比较简单，但是性能不行。首先有的url巨长，我们要在本地文件系统上建立如此深的目录，那么文件的打开和查找都很会很慢(回想kernel中通过路径名查找inode的过程吧)。如果使用自定义方式来处理模式，尽管也离不开文件和路径，但是它不会因url长度而产生复杂性增加和性能的降低。从某种意义上说这是一种用户态文件系统，最典型的应该算是squid中的CFS。nginx使用的方式相对简单，主要依靠url的md5值来管理，后面我们会分析。&lt;/p&gt;

&lt;p&gt;缓存离不开从后端取内容，然后发送给客户端。具体的处理方式大家很容易就会想到，肯定是一边接收一边发送，其他的方式都太低效了，如读完再发等等。这里提一下nginx边收边发，使用的结构是ngx_event_pipe_t，它是沟通后端和客户端的媒介。由于该结构是一个通用组件，所以需要一些特殊的标记来处理涉及存储的相关功能，那么成员cacheable就担当了这份重任。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;p-&amp;gt;cacheable = u-&amp;gt;cacheable || u-&amp;gt;store;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即cacheable为1，则需要存储，否则不存储。那么u-&amp;gt;cacheable跟u-&amp;gt;store代表什么？他们分别代表前面说的两种方式，即proxy_cache和proxy_store。 &lt;/p&gt;

&lt;p&gt;(补充一些知识，nginx在取后端数据时，它的行为受proxy_buffering控制，作用是为后端的服务器启用应答缓冲。如果启用缓冲，nginx假设被代理服务器能够非常快的传递应答，并将其放入缓冲区，可以使用proxy_buffer_size和proxy_buffers设置相关参数。如果响应无法全部放入内存，则将其写入硬盘。如果禁用缓冲，从后端传来的应答将立即被传送到客户端。)&lt;/p&gt;

&lt;p&gt;这里都是一些擦边球，我们还没有接触nginx cache功能的核心。从实现上看，在nginx upstream结构中有个成员叫cache，它的类型是ngx_shm_zone_t。如果我们开启cache功能，cache成员用来管理共享内存(为什么用到了共享内存？)，而其他方式的存储该成员都为NULL。另外有一点需要说明一下，在cache系统中一个文件通常被称为store object，即缓存对象，所以进行cache之前必然需要先创建一个store object。一个重要的问题就是如何选择创建的时机，这点大家有什么看法？首先我们需要检查一个文件是否是需要缓存，很明显GET方法请求的文件一般需要缓存，所以我们在请求处理的前期，看到了GET方法，就可以先创建一个对象。但是很多时候，即使是一个GET方法请求的文件也不能缓存，那么你过早的创建对象，不仅浪费时间也浪费了空间，到头来还要将它销毁。那么什么会影响GET请求的存储呢？那就是响应头中的Cachecontrol字段，这个字段就告诉代理或者浏览器，该文件能否被缓存。一般的cache服务器面对响应头中没有Cache-control字段的请求，默认都是要缓存的。&lt;/p&gt;

&lt;p&gt;基于这一点的考虑，我们开发的cache服务器就是在响应头解析完成，拿到可缓存的足够证据之后，才会创建缓存对象。遗憾的是，nginx没有这么去做。&lt;/p&gt;

&lt;p&gt;nginx在ngx_http_upstream_init_request函数中完成缓存对象的创建，这个函数处在http处理的什么阶段呢？在跟后端建立连接之前。这个地方，我个人认为不太合适。。。大家认为呢？&lt;/p&gt;

&lt;p&gt;关于创建过程，大家可以去读函数ngx_http_upstream_cache。这里我拿我们的cache跟nginx对比来分析吧。我们的request中使用一个名叫store的成员，来跟缓存对象建立联系。nginx也差不多，它的request结构体中有个cache成员来做同样的事情。区别在于我们的store成员对应的空间在共享内存中，而nginx则是在r-&amp;gt;pool里申请的(我们为什么这么做？)。&lt;/p&gt;

&lt;p&gt;下一步，nginx需要根据配置来生成缓存对象的key，此处一般都是用md5来算的。这个key作为一个缓存对象在系统中的唯一标识，很多人可能担心md5碰撞的问题。这个我认为要求如果不是特别苛刻，这里完全可以接受的，而且处理也相对简单。&lt;/p&gt;

&lt;p&gt;后面要处理的是，文件到底应该已怎样的形式存储在磁盘？
我们拿前面用过的一个例子：/file/2013/0001/en/test.html，它对应的md5值是8ef9229f02c5672c747dc7a324d658d0，实际上nginx就用它当做文件名。这样就可以了？如果我们找一个目录来存放文件，里面都是一堆这样的文件，那么会怎样？我们知道，大多数文件系统下，都对单个目录下的文件数量有限制，所以这样简单粗暴的处理是不行的。那怎么办？nginx通过配置可以让你使用多级目录，来解决这个问题。简单来说，nginx通过levels这个指令指定目录层数(冒号分隔)和每个目录名字的字符个数，在我们的例子中，假设配置levels=1:2，意思是说使用两级目录，第一级目录名是一个字符，第二级用两个字符。但是nginx最大支持3级目录，即levels=xxx:xxx:xxx。&lt;/p&gt;

&lt;p&gt;那么构成目录名字的字符哪来的呢？假设我们的存储目录为/cache，levels=1:2，那么对于上面的文件 就是这样存储的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;/cache/0/8d/8ef9229f02c5672c747dc7a324d658d0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看到0和8d这两个目录名怎么来的了吧，不用解释了。&lt;/p&gt;

&lt;p&gt;对象创建完成之后，就需要缓存对象管理结构中去了，这个ngx_http_file_cache_exists去处理的。&lt;/p&gt;

&lt;p&gt;如果在创建这个文件时，当前目录及文件已经存在，那如何处理？大家可以去翻翻代码，看nginx怎么处理的。&lt;/p&gt;

&lt;p&gt;讨论先告一个段落，其实现在都是一些准备工作，下次讨论后端内容到来的处理。&lt;/p&gt;

&lt;p&gt;扩展阅读：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.pagefault.info/?p=123&quot;&gt;http://www.pagefault.info/?p=123&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.pagefault.info/?p=375&quot;&gt;http://www.pagefault.info/?p=375&lt;/a&gt;&lt;/p&gt;
</description>
      <pubDate>Sun, 23 Nov 2014 00:00:00 +0800</pubDate>
      <link>/blog/cacheserver1.html</link>
      <guid isPermaLink="true">/blog/cacheserver1.html</guid>
    </item>
    
    <item>
      <title>谈谈最近的校招</title>
      <description>&lt;p&gt;这两天各大企业开始陆续在校园进行校招，基本的情况是外企和BAT在第一波入场，收割最好的苗子。再经历了一线，二线等互联网公司的扫荡以后，后面进局的中小公司，基本只能检点残羹剩菜。对于小公司来说，也可以提前入场，不过这样效果并不好，现在信息开放透明，加上学长的口碑，学生们基本也比较认可名企，小公司的忽悠一般很难奏效。&lt;/p&gt;

&lt;p&gt;依我的信息来看，北京高校的学生比较关注户口问题。在很多情况下，能解决户口的公司，他们可以不太在意公司的名气和待遇（当然能解决户口的，基本名气和待遇都还可以）。我认识的一个同事，清华研究生毕业，去了一个搞外包的公司待了一年，就出来了，就是因为那个公司给解决户口，虽然中途离开需要交数额不小的违约金，但是还是有很多人选择走这条路。可见户口这个问题的重要性。像我这种非北京学校毕业的，压根就对户口没什么感觉。有一次我参加一个讲座，旁边坐了一个北航的小妹妹（长得挺不错的），她说最近在找公司，我跟她开玩笑，说来我们公司吧。她当真了，开口就问，能解决户口吗？我当时很吃惊，如果是我，我会问，公司做什么的，怎么样，待遇如何之类的。&lt;/p&gt;

&lt;p&gt;除了户口，在接下来的就是待遇问题，根据我的交流发现，大多数的学生还是比较偏重于待遇的，能给出高待遇的公司，是很受追捧的。这个问题很现实，在校的学生往往没有多少钱，如今的社会又有太多诱惑和无奈的东西摆在他们面前，所以对于金钱的渴望，也是人之常情。&lt;/p&gt;

&lt;p&gt;俗话说“重赏之下必有勇夫”，别人对于没什么兴趣，也许是你给的不够多。这里举个例子，我昨天刚听说。CDN领域的老二（他们自己说是老大）蓝汛，最近开始校招。虽然CDN厂商在业界，大家都还是比较熟悉的，或多或少都有些业务上的往来。但是对于应届本科生，硕士生来说，可能比较陌生。由于蓝汛是在美上市公司，会让学生多少感觉有些靠谱，不过这一点并不会让很多人买账，毕竟这轮校招的非富即贵，上市公司已经没有多少号召力了。于是，蓝汛抛出了杀手锏，开高价。据几位同学爆料，他们硕士同学去，蓝汛最后给开出25w高价的年薪，这个价格完全秒杀BAT。以我来看，蓝汛这种反常，癫狂的行为其实就是一种营销，噱头罢了。&lt;/p&gt;

&lt;p&gt;蓝汛到底想干嘛？作为跟蓝汛处在同一个圈子人，结合小道消息，我想谈几点我自己的看法。据我所知，蓝汛最近几年每年都在组织结构上做调整，调整未必是坏事，但是调整的太频繁就往往是恶性的。就像睡觉一样，频繁的翻身调整，很可以是由于失眠。大概一年之前蓝汛的市值跌到2亿美金的低价，很多公司当时都要收购它。后来随着网宿的崛起，带动了蓝讯的一波增长。整个互联网的发展和目前CDN市场的局势，业务发展遇到瓶颈，增长放缓，让蓝汛危机重重。领导层最近这一两年，也是试图去转型。转型的第一步，他们选择“换血”。据很多蓝汛的朋友反映，今年以来，老同事基本被清洗殆尽。去年有个蓝汛的哥们跟我在网上讨论nginx，就诉苦蓝汛给研发压低待遇，很多同事都离职了。在今年4月份的时候，我得知他也离开了蓝汛。在我看来，蓝汛这样纯属作，长远的角度来说，蓝汛已经没有什么上升的空间，技术完全不存在他们的企业基因里。最近电信跟联通宣布组建CDN合资公司，进军CDN领域，网宿蓝汛应声大跌。对于这种重资产行业，发展受限之后，谋求转型的代价太大，有太多无法丢弃的历史包袱。关于CDN圈子的事，后面我会再专门跟大家讨论。&lt;/p&gt;

&lt;p&gt;除了户口和待遇问题，排第三位的是平台。也就是对大多数人来说，户口最重要，待遇次之，平台排最后。户口我就不谈了。在我的观念里，平台应该远大于待遇。但是这对于应届学生来说，并不会有太深的感受。&lt;/p&gt;

&lt;p&gt;什么是平台？概括来说，对于应届生来说就是起点的高低，当然很多人把待遇高也列为起点高的一种，这里不讨论这种观点。现在是个看出身的年代，名校跟名企的光环在跳槽或者创业融资方面有着重要的帮助作用。这是可以理解的，就跟高考一样，判断一个人是不是人才，理论上是要花很长时间的，但是企业也好，投资人也好没有办法，是无法去这样做的。对他们来说最靠谱，也是最快速的识别人才的方法，就只有履历了。很简单的道理，你以前牛b过，成功过，代表今后取得成功的概率要大一些，这也就是程序员们所熟悉的局部性原理。&lt;/p&gt;

&lt;p&gt;对于应届生来说，当前阶段是进入名企巨头的黄金窗口期。&lt;/p&gt;

&lt;p&gt;很多热爱技术的同学，平台对他们有着无比的重要性。有一个观点是这样的，说去大公司只能当螺丝钉，而去小公司，可以学到更全面的技术，可以有挑大梁的机会。我是彻彻底底反对这个观点的：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;多数小公司什么德行，很多学生并不清楚。在中国没有几个小公司是技术驱动，基本都是业务导向性。他们这些公司创始人，多数都是在原来单位混了一段时间，掌握了套路，心想妈的，就这点东西，老子自己也能干，干嘛还给你打工。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;管理混乱，缺少技术氛围，往往碰到技术难题，没人能帮上忙。我碰到了无数次这样的情况，在群里找我帮他看看一个nginx的问题。我问你们公司没人吗？他们的回答往往都是周围人都很菜，或者领导安排他一个人搞，周围没有懂。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;小公司的技术不仅不杂而且不深，所谓的小公司学到的东西多，纯属扯淡。除非你去一个初创的公司，就几个人，你确实能接触的东西多一些，请问有几个应届生愿意去，为什么不愿意去。因为有太多的不确定，首先待遇不高，其次由于初创，事较多，很难有个安心研究技术的环境，最后就是很难判断老板是不是靠谱，自己跟他打拼，到头来能否分到东西。除非这个老板有着非常好的口碑和认可度，比如前段时间百度离职创业的林仕鼎大哥。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;。。。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;。。。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;说了小公司的不好，那么关于名企巨头的好，就不说了。问问学长，师兄最清楚。&lt;/p&gt;

&lt;p&gt;最后说一点，选公司的时候需要特别注意的一点，就是R &amp;amp; D里面的R，即研发中研的部分。这个决定着公司是否有足够深的技术底蕴。当然除了各个大厂的研究院之外，很多公司也有类似的部门，比如基础架构组，核心研发组之类的，都是有同样作用的。往往这种部门不会牵扯太多具体的业务，属于追踪前沿，挖掘技术潜力的作用。这些部门一般大牛很多，技术氛围也不会差。所以应届生在面试的时候，一定要问一下面试官，各部门组成的结构和智能，如果只是D性质的公司，比如前面讲到的中小公司，整个开发工作完全是业务驱动，进去半年，一年以后，你就会被业务搞的团团转，永远有做不完的需求。你的技术得不到积累，深度得不到拓展，更可怕的是，你在那种环境下，可能会导致技术的热情在衰减，惰性在慢慢增加，最沦落到混日子的地步。&lt;/p&gt;

&lt;p&gt;当然选择小公司也有很多人艰不拆的原因在里面，这里就不说了。以上莫对号入座。（逃&lt;/p&gt;
</description>
      <pubDate>Sun, 26 Oct 2014 00:00:00 +0800</pubDate>
      <link>/blog/onsite.html</link>
      <guid isPermaLink="true">/blog/onsite.html</guid>
    </item>
    
    <item>
      <title>在小公司混</title>
      <description>&lt;p&gt;最近这段时间公司在招人，我也面试了不少应聘者，以30岁上下，工作5年左右的人居多。这个年龄段其实是中小公司的主要选择对象，这类公司一般招人都是为了项目需要或者急需熟手来干活，而很少像大公司那样，招一些有潜力，底子好，有上进新的应届学生。在市面上有能力的新人往往在校招阶段就被大公司靠着自己的招牌和有竞争力的薪资待遇收拢到旗下，而对于社招，更是优中选优，挑三挑四。总而言之，大厂把品相好的果子挑走之后，留下一些“残羹剩菜”让中小厂，去自己筛一筛，看看能不能找到一些还能吃，能用的。当然也有很多高质量的人才，会被大厂漏掉。小公司在招人这个方面确实是很痛苦，除了大厂疯狂抢夺人的原因之外，一方面没有充足的预算来提供足够吸引人的薪资福利，另一方面，技术和企业文化氛围也普遍差强人意。&lt;/p&gt;

&lt;p&gt;在我们面试的过程中，有一些大家都知道的潜规则，比如某人来面试，技术能力不错，但是价格开的太高，对于个别有钱的中小公司，偶尔会给出special offer之外，多数公司的处理方式就是找人为难他，面试出难题，想方设法刁难他，让他感觉不是钱的问题，而且是自己能力不够。其实对于面试者，他们都懂的。还有一些工作7，8年的，技术也不错只是跟价格不太匹配，我们认为这个水平的，从工作4，5年的应聘者中也很能找到合适的人选，关键是出价还比他低。另一个方面，有些技术很一般，但是由于工作才1，2年，反而会给机会。所以技术水平很大程度上是跟年龄紧密联系的，工作1年学的东西，面试官感觉你懂的挺多，技术不错，如果同样的东西，放在3，4年工作经验的人身上，就会感觉技术比较菜。这也就是为什么人们常说，搞技术要不断学习，学到的技术如果跑不赢年龄，你的技术能力就是在贬值。&lt;/p&gt;

&lt;p&gt;一个人的技术能力分两种情况看待，公司内和市场内。公司内认可的技术带头人，一般是公司核心，领导也比较重视，当然待遇福利也往往很不错，小公司里这类人在老板眼里算是相当重要的，很多时候一个核心技术人员的离职，会波及公司的核心生产线，以及很多连锁反应，所以他们在公司里是香饽饽，混得比较好。但是，对这些人来说，往往会陷入一种境地，就是太依赖公司对自身价值的认可，对于单纯从技术角度来说，由于公司技术层次，业务环境等方面的影响，你在一个公司里是技术大牛，或者你掌握的技术可以摆平业务上的大多数问题，并不代表你在业界和技术圈里的层次就很高。一个是相对能力，一个可以认为是绝对能力。我们也见过太多的例子，某人在某公司里是公认的技术大牛，跳槽的时候到处碰壁，即使去了一些大公司，在技术上也是二流三流的水平。当然很多人反驳这样的观点，说这个分人。没错，这个不可否认，这里我想说的是，特别是在那些小公司里待了很长时间的人，这个情况应该要去重视，居安思危，多跟外界交流。完全沉浸在公司的业务里，优良好坏全靠领导拍板的工作状态是很危险的。之前很多人讨论过一个问题，问你有一天突然被公司踢出去了，你会慌吗？一定有人会完全慌掉的。毕竟小公司突然散伙或者搞起政治来，也是常有的事。&lt;/p&gt;
</description>
      <pubDate>Sun, 12 Oct 2014 00:00:00 +0800</pubDate>
      <link>/blog/daily1.html</link>
      <guid isPermaLink="true">/blog/daily1.html</guid>
    </item>
    
    <item>
      <title>王垠：天才是什么</title>
      <description>&lt;p&gt;王垠是个很奇怪的人，他的&lt;a href=&quot;http://www.yinwang.org/&quot;&gt;博客&lt;/a&gt;中有很多文章在发表之后，出于各种原因经常来回修改内容，特别是一些在原稿中用词过激，或者口气过重的话，有时直接文章标题给换了。我不懂他这么做到底图什么。这里我也没有别的意图，有篇文章我觉得有必要拿出来，让大家看看。&lt;/p&gt;

&lt;p&gt;请点击：&lt;a href=&quot;http://yinwang.org/blog-cn/2014/08/11/genius&quot;&gt;怎样成为一个天才&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这篇文章的标题，也许就足以让你有兴趣去看一看这个人和他说的话，这里我不做评价。当然这篇文章说不好哪天，王垠突然给删掉也是很有可能的，不过无所谓。其实这篇文章就像我上面说的一样，是一篇阉割修改版。原始的文章王垠用第三人称的口吻讲述了一个叫王垠的天才的故事。&lt;/p&gt;

&lt;p&gt;我给出原文，供大家瞻仰。需要注意一点，王垠不知道从什么时候开始，在文章中标注了版权提示：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;（王垠 yinwang.org 版权所有，未经许可，请勿转载）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里我们忽略。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;天才是什么&quot;&gt;天才是什么&lt;/h2&gt;

&lt;p&gt;有人说我是天才。我一直“谦虚”得很， 从来不承认。可是纵观像 John Nash，Richard Feynman 那些公认的天才的各种特征和生活遭遇，我发现自己还真的是一个天才。这一方面让我开心，另一方面又让我痛苦。可是除非洗脑技术高度发展，一旦成为了天才，就很难再还原成普通人了。所以目前我只是做一天天才撞一天钟，也许哪天就像 Nash 那样疯掉也说不定 :)&lt;/p&gt;

&lt;p&gt;在 IU 的时候我有一个好朋友，是一个新闻系的漂亮女生。我很喜欢她，所以经常不小心泄漏点“牛气”来增加她对我的好感。于是有一天吃冰激凌的时候我扭扭捏捏的说：“其实……其实你知道吗……我是一个天才……”她冷静地笑了，说：“我相信你。因为我也是一个天才。每个人都是天才，只是他们天才的地方不一样而已。比如我，我对文字就很有天才，你就没有这种天才！”然后我恍然大悟，原来做个天才并不是什么了不起的事情，那我以前在谦虚些什么呢？也许扭扭捏捏不承认，却打心眼里想让人认为自己是天才，其实才是最大的傲慢吧？所以呢，以后如果有人说我是天才，我就认了。&lt;/p&gt;

&lt;p&gt;王垠是一个天才。这是一句很谦虚的话 :)&lt;/p&gt;

&lt;h4 id=&quot;从动手中学习（learn-by-doing）&quot;&gt;从动手中学习（learn by doing）&lt;/h4&gt;

&lt;p&gt;那么天才到底是什么呢？我想这是很多人都不明白的问题。天才就是能把圆周率背到一千位以后吗？那只是记性好，或者说死记硬背能力强。天才就是看完好几本砖头厚的书之后，能够解决一些研究问题吗？这种人虽然勤奋，然而他们的知识大部分是从别人那里得到的，而不是靠自己的头脑想出来，所以他们也不是天才，最多可以算是博学。在某种程度上，博学的人跟死记硬背的人，性质是相似的。&lt;/p&gt;

&lt;p&gt;这第一种死记硬背的人，就是中国的教育体制下出来的典型。而读很多书，记住很多吓人的名词的人，是美国教育体制下出来的典型。天才去面试遇到这两种人，总是会栽个大跟头。天才进了公司，总是被这两种人欺负。为什么呢？因为这两种人重视的是所谓“经验”，而天才往往依靠自己的直觉，而不是经验。天才记不住他们知道的那些吓人的名词，却更深刻地知道那些名词所代表的意义。所以这些死记硬背的人总是把天才当成是白痴或者无知的人。&lt;/p&gt;

&lt;p&gt;如果你看过 John Nash 的传记《A Beautiful Mind》，你就会发现他与其他人的不同。Nash 看书只看封面和开头，把这书要讲的问题了解清楚之后，就自己动手解决。最后，他完全依靠自己的“头脑暴力”创造出整本书的内容。Nash 头脑里的数学知识，绝大部分是他自己造出来的，而不是看书看会的。也就是说，他一个人几乎完全独立地造出了整个现代数学！Learn by doing, 这就是天才的一个最重要的特征。&lt;/p&gt;

&lt;p&gt;另一位天才 Richard Feynman 也有类似的特点。由于他脑子里的东西基本都是自己想出来的，所以同一个名词，在他头脑里关联的概念，其实是跟其他人很不一样的。这种现象体现在他的自传《What Do You Care What Other People Think?》里面，他说：“我不知道这个东西的名字，但我却知道这个东西是什么。”这也体现在他的一些演讲视频里。看 Feynman 演讲的时候，有时候你发现他用错专业名词，或者想不起来叫什么，跟听众确认了发明这概念的人不在场，然后说：“反正那家伙不在……所以管它叫什么呢。你们知道我在说什么就行！”&lt;/p&gt;

&lt;p&gt;Nash，Feynman，你们两个要是来到今天去某些公司面试，估计也跟王垠一样的下场吧。&lt;/p&gt;

&lt;p&gt;说到这里，你们觉得王垠也有这些特征码？说对了。王垠是程序语言（PL）的专家。然而跟大多数 PL 专家不同的是，王垠脑子里的大部分知识，其实不是从书或者 paper 里来的，而是自己想出来的。他从来没有安静的看完过一章经典书籍（比如《Types And Programming Languages》）的内容，却掌握了很多比它们还要先进而简单的技术。王垠看 paper 一般只看 abstract，然后就自己想出甚至直接得到它最后的结论。他想一个问题往往不是空想，而是用写代码来具体实现，比如用 Scheme 写一个解释器来做实验。做出一个模型，然后给它一些输入，观察它的输出。反复修改实验，最后领悟到里面的真谛。王垠之所以为他的“40行代码”沾沾自喜，并不是因为别人写不出那 40 行代码，而是因为他是完全独立的写出来，没有看过任何书籍和 paper。相比之下，其他人需要看过很多 paper 之后才能写出来，甚至根本写不出来。&lt;a href=&quot;http://www.zhihu.com/question/20822815&quot;&gt;那 40 行代码&lt;/a&gt;，包含了有些聪明人十多年的研究！&lt;/p&gt;

&lt;p&gt;这就是为什么王垠跟本领域的人讨论总是被嘲笑，因为他自己独立创造了那么多的概念，所以他总是对术语张冠李戴，鸡同鸭讲。由于他总是独立解决问题，他不知道哪些想法是新的，哪些是旧的，以至于他不知道什么东西可以发表，什么不可以。一个想法，不管别人觉得是新的还是旧的，都是王垠自己想出来的宝贝，所以他不在乎到底新不新。王垠对很多东西不耐烦，有一种上当的感觉。而其实没有人在欺骗他，只是因为他是一个天才，他看穿了太多的东西。他抱怨那么明显的东西别人为什么总是搞得那么复杂，而事实是别人一开头学过来的东西就那么复杂，所以也不知道如何才能改得简单一些。王垠往往很快就发现一些研究是穷途末路，以至于有人觉得他没有毅力，而其实呢，只是这些人没有发现这种超凡的洞察力的价值。很多人心目中最神圣的理论，在王垠的眼里都是吃饱了撑着，死路一条。他并不是妄加判断，而经常是经过试验得出的结论。所以王垠很适合做博导，因为他会很快的发现并且防止学生走向歧途。王垠也适合做公司的技术顾问，也许你的新想法，正在被他抛弃的垃圾堆里呢？&lt;/p&gt;

&lt;p&gt;有些人以为王垠对自己做的 PySonar 和 RubySonar 引以为豪，以为他是 Python 和 Ruby 的专家。而其实呢，他根本不在乎 Python 和 Ruby。他只是把自己已有的 PL 知识拿出来用了一下。在创造 PySonar 和 RubySonar 之前，他其实完全没用过 Python 和 Ruby。在极短的时间之内，他不但学会了 Python 和 Ruby，而且实现了它们。他也清晰的看到 Python 和 Ruby 的缺陷。其中有些缺陷是他绝对不会犯的错误。总之，PySonar 和 RubySonar 只是他可以做的许多种东西里面的两个。&lt;/p&gt;

&lt;p&gt;这样的东西，为什么其他人做不到，甚至很多其它 PL 专家都做不到呢？那就是因为其它人头脑里的知识，跟王垠头脑里的知识，有着本质的区别。同样的结论，根据它的来源不同，是有根本性的区别的。很多人头脑里的知识，是从别人的书籍或者论文里直接学来的。这种知识是一种漂浮的，无根基的现成结论。得到这种结论的人，虽然能够按照这些结论推导出更多的结论，然而由于不知道这些结论的动机和来源，不知道创造它们的人头脑里的直觉，他们没法突破它的框架，只能做一些修修补补，而不能有突破性的进展。&lt;/p&gt;

&lt;p&gt;王垠为什么能够具有跟 Nash 和 Feynman 一样的特征呢？因为他十年前看了他们的传记，受到了启发，然后他相信 Nash 和 Feynman 的脑子其实跟自己的没什么两样，所以自己应该也能做到。经过十年的磨练之后，他做到了。在 IU 的一年之中，他独立的构造出了这个领域近一百年的理论。很多几百页的书，当他第一次仔细看的时候，发现里面的东西都早已经明白了。这不是瞎吹的，因为这一百年造出来的理论，浓缩去冗余之后，其实没有很多。信念的力量，就是有这么强大。&lt;/p&gt;

&lt;h3 id=&quot;天才的缺点&quot;&gt;天才的缺点&lt;/h3&gt;

&lt;p&gt;天才并不是可以即插即用的“熟练工”。天才的头脑里其实没有很多现成的知识，也许比一般人还要空一些。然而天才的头脑之所以天才，就在于他能从无到有创造出知识。这种头脑里面很少有“固化”或者“焊死”的线路，就像某些动态编程语言，一切都可以改变。这种语言可以非常灵活而简洁的创造出最初的模型产品，然而它的实际运行速度，却不可能和 C++ 之类的语言相比。这是因为，天才在思考一个问题的时候并不是按部就班的，而是在每一步都会冒出多种不同的方式。做出这些思考和判断的时间，使得天才的速度不如那些按部就班的人。&lt;/p&gt;

&lt;p&gt;比起动态语言，C++ 就像是那种熟练工。是的，它是即插即用，速度非常快，然而它却只会做那几件斯通见惯的事情。一旦你遇到新的问题，或者想要创造新的东西，就会发现它开始阻碍你的正常思维。这并不是说按部就班的人一无是处，恰恰相反，他们也很有用。他们属于那种勤勤恳恳，做一件事乐此不疲的人。他们值得我们的尊敬。在使用天才把初步的模型制造出来之后，这种人可以迅速的填补好细枝末节。如果你让天才来干这种细枝末节的事情，不但会让他无聊得发疯，而且是大大的浪费了他的潜力。最后捡了芝麻丢了西瓜。&lt;/p&gt;

&lt;p&gt;这个世界上缺乏天才，然而更缺乏的是懂得如何使用天才，懂得如何把他和普通人组合起来，充分发挥两者优势的人。天才和普通人并没有贵贱之分，只有分工不同。&lt;/p&gt;

&lt;h3 id=&quot;天才的痛苦&quot;&gt;天才的痛苦&lt;/h3&gt;

&lt;p&gt;做天才很幸运吗？其实不是的。由于人们不理解天才，不懂得如何尊重他们，很多天才最后的命运都是发疯或者自杀，想想 Nash 和梵高吧。王垠貌似已经有这种苗头，所以他希望让自己变得白痴一点。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;在知乎上，有位网友对这篇文章给出详细的分析和讲解：&lt;a href=&quot;http://www.zhihu.com/question/24833694&quot;&gt;http://www.zhihu.com/question/24833694&lt;/a&gt;&lt;/p&gt;
</description>
      <pubDate>Sat, 06 Sep 2014 00:00:00 +0800</pubDate>
      <link>/blog/genius.html</link>
      <guid isPermaLink="true">/blog/genius.html</guid>
    </item>
    
    <item>
      <title>9 Differences between TCP and UDP Protocol</title>
      <description>&lt;p&gt;TCP and UDP are two transport layer protocols, which are extensively used in internet for transmitting data between one host to another. Good knowledge of how TCP and UDP works is essential for any programmer. That’s why differences between TCP and UDP is a popular Java programming interview question. I have seen this question many times on various Java interviews , especially for server side Java developer positions. Since FIX (Financial Information Exchange) protocol is also a TCP based protocol, several investment banks, hedge funds, and exchange solution providers look for Java developers with good knowledge of TCP and UDP. Writing FIX engines and server side components for high speed electronic trading platforms requires capable developers with a solid understanding of the fundamentals including data structure, algorithms and networking.&lt;/p&gt;

&lt;p&gt;By the way, use of TCP and UDP is not limited to one area, it’s at the heart of internet. The protocol which is core of internet, HTTP is based on TCP. One more reason, why a Java developer should understand these two protocols in detail is that Java is extensively used to write multi-threaded, concurrent and scalable servers. Java also provides a rich Socket programming API for both TCP and UDP based communication. In this article, we will learn the key differences between the TCP and UDP protocols. To start with, TCP stands for Transmission Control Protocol and UDP stands for User Datagram Protocol, and both are used extensively to build Internet applications.&lt;/p&gt;

&lt;h2 id=&quot;differences-between-tcp-vs-udp-protocol&quot;&gt;Differences between TCP vs UDP Protocol&lt;/h2&gt;

&lt;p&gt;I love to compare two things on different points, this not only makes them easy to compare but also makes it easy to remember differences. When we compare TCP to UDP, we learn difference in how both TCP and UDP works, we learn which one provides reliable and guaranteed delivery and which doesn’t. Which protocol is fast and why, and most importantly when to choose TCP over UDP while building your own distributed application. In this article we will see difference between UDP and TCP in 9 points, e.g. connection set-up, reliability, ordering, speed, overhead, header size, congestion control, application, different protocols based upon TCP and UDP and how they transfer data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connection oriented vs Connection less&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TCP Handshake Message DiagramThe first and foremost difference between them is that TCP is a connection oriented protocol while UDP is a connection-less protocol. This means  a connection is established between client and server, before they can send data over TCP. Connection establishment process is also known as TCP hand shaking where control messages are interchanged between client and server. The image here describes the process of a TCP handshake, where control messages are exchanged between client and server. Client, which is the initiator of TCP connection, sends a SYN message to the server, which is listening on a TCP port. Server receives and sends a SYN-ACK message, which is received by client again and responded using ACK. Once the server receive this ACK message,  the TCP connection is established and ready for data transmission. On the other hand, UDP is a connection less protocol, and point to point connection is not established before sending messages. That’s the reason why, UDP is more suitable for multicast distribution of message, one to many distribution of data in single transmission.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://talkpower.info/images/posts/TCP-Handshake-Message-Diagram.jpg&quot; alt=&quot;handoff&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TCP provides delivery guarantee, which means a message sent using TCP protocol is guaranteed to be delivered to the client. If a message is lost in transit then it is recovered using resending, which is handled by the TCP protocol itself. On the other hand, UDP is unreliable, it doesn’t provide any delivery guarantee. A datagram package may be lost in transit. That’s why UDP is not suitable for programs which require guaranteed delivery.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ordering&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from delivery guarantee, TCP also guarantees order of message. The messages will be delivered to the client in the same order that the server has sent them, though its possible they may reach out of order to the other end of the network. TCP protocol will do all the sequencing and ordering for you. UDP doesn’t provide any ordering or sequencing guarantee. Datagram packets may arrive in any order. That’s why TCP is suitable for application which need delivery in sequenced manner, though there are UDP based protocols as well which provide ordering and reliability by using sequence number and redelivery e.g. TIBCO Rendezvous, which is actually a UDP based application.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data Boundary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TCP does not preserve data boundary, UDP does. In Transmission control protocol, data is sent as a byte stream, and no distinguishing indications are transmitted to signal message (segment) boundaries. On UDP, Packets are sent individually and are checked for integrity only if they arrived. Packets have definite boundaries which are honoured upon receipt, meaning a read operation at the receiver socket will yield an entire message as it was originally sent. Though TCP will also deliver complete message after assembling all bytes. Messages are stored on TCP buffers before sending to make optimum use of network bandwidth.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Speed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In one word, TCP is slow and UDP is fast. Since TCP does has to create connection, ensure guaranteed and ordered delivery, it does lot more than UDP. This costs TCP in terms of speed, that’s why UDP is more suitable where speed is a concern, for example online video streaming, telecast or online multi player games.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Heavy weight vs Light weight&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because of the overhead mentioned above, Transmission control protocol is considered as heavy weight as compared to light weight UDP protocol. The simple mantra of UDP is to deliver messages without bearing any overhead of creating a connection and guaranteeing delivery or order guarantee. This is also reflected in their header sizes, which is used to carry meta data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Header size&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TCP has a bigger header than UDP. Usual header size of a TCP packet is 20 bytes which is more than double of 8 bytes, header size of UDP datagram packet. TCP header contains Sequence Number, Ack number, Data offset, Reserved, Control bit, Window, Urgent Pointer, Options, Padding, Check Sum, Source port, and Destination port. While UDP header only contains Length, Source port, Destination port, and Check Sum. Here is how TCP and UDP header looks like :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://talkpower.info/images/posts/TCP-Packet-Format-Diagram.gif&quot; alt=&quot;tcp&quot;&gt;
TCP Header Format&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://talkpower.info/images/posts/UDP-Packet-format.jpg&quot; alt=&quot;tcp&quot;&gt;
UDP Header Format &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Congestion or Flow control&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TCP does Flow Control. TCP requires three packets to set up a socket connection, before any user data can be sent. TCP handles reliability and congestion control. On the other hand, UDP does not have an option for flow control.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Usage and application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Where does TCP and UDP are used in internet? After knowing key differences between TCP and UDP, we can easily conclude, which situation suits them. Since TCP provides delivery and sequencing guaranty, it is best suited for applications that require high reliability, and transmission time is relatively less critical. While UDP is more suitable for applications that need fast, efficient transmission, such as games. UDP’s stateless nature is also useful for servers that answer small queries from huge numbers of clients. In practice, TCP is used in the finance domain e.g. the FIX protocol is a TCP based protocol, while UDP is used heavily in gaming and entertainment sites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TCP and UDP based Protocols&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the best example of TCP based higher end protocol is HTTP and HTTPS, which is everywhere on internet. In fact most of the common protocols you are familiar of e.g. Telnet, FTP and SMTP all are based over Transmission Control Protocol. UDP don’t have anything as popular as HTTP but it is also extensively used in protocol like DHCP and DNS. Some of the other protocols which are based on the User Datagram protocol are Simple Network Management Protocol (SNMP), TFTP, BOOTP and NFS (early versions).&lt;/p&gt;

&lt;p&gt;Always remember to mention that TCP is connection oriented, reliable, slow, provides guaranteed delivery and preservers order of messages, while UDP is connection less, unreliable, no ordering guarantee, but a fast protocol. TCP overhead is also much higher than UDP, as it transmits more meta data per packet than UDP. It’s worth mentioning that header size of Transmission control protocol is 20 bytes, compared to 8 bytes header of User Datagram protocol. Use TCP, if you can’t afford to lose any message, while UDP is better for high speed data transmission, where loss of single packet is acceptable e.g. video streaming or online multi player games. While working in TCP/UDP based application on Linux, it’s also good to remember basic networking commands e.g. telnet and netstat, they help tremendously to debug or troubleshoot any connection issue.&lt;/p&gt;
</description>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0800</pubDate>
      <link>/blog/tcp-udp.html</link>
      <guid isPermaLink="true">/blog/tcp-udp.html</guid>
    </item>
    
    <item>
      <title>在线markdown编辑器-Cmd</title>
      <description>&lt;p&gt;我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，&lt;strong&gt;Cmd Markdown&lt;/strong&gt; 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。&lt;/p&gt;

&lt;p&gt;您可以使用 Cmd Markdown：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;整理知识，学习笔记&lt;/li&gt;
&lt;li&gt;发布日记，杂文，所见所想&lt;/li&gt;
&lt;li&gt;撰写发布技术文稿（代码支持）&lt;/li&gt;
&lt;li&gt;撰写发布学术论文（LaTeX 公式支持）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 &lt;i class=&quot;icon-file&quot;&gt;&lt;/i&gt; &lt;strong&gt;新文稿&lt;/strong&gt; 或者使用快捷键 &lt;code&gt;Ctrl+Alt+N&lt;/code&gt;。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;什么是-markdown&quot;&gt;什么是 Markdown&lt;/h2&gt;

&lt;p&gt;Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，&lt;strong&gt;粗体&lt;/strong&gt; 或者 &lt;em&gt;斜体&lt;/em&gt; 某些文字，更棒的是，它还可以&lt;/p&gt;

&lt;h3 id=&quot;高亮一段代码&quot;&gt;高亮一段代码&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@requires_authorization&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# A comment&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;绘制表格&quot;&gt;绘制表格&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th style=&quot;text-align: right&quot;&gt;价格&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;$1600&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;$12&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;$1&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;更详细语法说明&quot;&gt;更详细语法说明&lt;/h3&gt;

&lt;p&gt;想要查看更详细的语法说明，可以参考我们准备的 &lt;a href=&quot;https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown&quot;&gt;Cmd Markdown 简明语法手册&lt;/a&gt;，进阶用户可以参考 &lt;a href=&quot;https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-%E9%AB%98%E9%98%B6%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C&quot;&gt;Cmd Markdown 高阶语法手册&lt;/a&gt; 了解更多高级功能。&lt;/p&gt;

&lt;p&gt;总而言之，不同于其它 &lt;em&gt;所见即所得&lt;/em&gt; 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。&lt;strong&gt;Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。&lt;/strong&gt; 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;什么是-cmd-markdown&quot;&gt;什么是 Cmd Markdown&lt;/h2&gt;

&lt;p&gt;您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 &lt;strong&gt;编辑/发布/阅读&lt;/strong&gt; Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。&lt;/p&gt;

&lt;h3 id=&quot;1.-实时同步预览&quot;&gt;1. 实时同步预览&lt;/h3&gt;

&lt;p&gt;我们将 Cmd Markdown 的主界面一分为二，左边为&lt;strong&gt;编辑区&lt;/strong&gt;，右边为&lt;strong&gt;预览区&lt;/strong&gt;，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！&lt;/p&gt;

&lt;h3 id=&quot;2.-编辑工具栏&quot;&gt;2. 编辑工具栏&lt;/h3&gt;

&lt;p&gt;也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 &lt;strong&gt;编辑区&lt;/strong&gt; 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.zybuluo.com/static/img/toolbar-editor.png&quot; alt=&quot;tool-editor&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;3.-编辑模式&quot;&gt;3. 编辑模式&lt;/h3&gt;

&lt;p&gt;完全心无旁骛的方式编辑文字：点击 &lt;strong&gt;编辑工具栏&lt;/strong&gt; 最右测的拉伸按钮或者按下 &lt;code&gt;Ctrl + M&lt;/code&gt;，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！&lt;/p&gt;

&lt;h3 id=&quot;4.-实时的云端文稿&quot;&gt;4. 实时的云端文稿&lt;/h3&gt;

&lt;p&gt;为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 &lt;strong&gt;编辑工具栏&lt;/strong&gt; 的最右侧提示 &lt;code&gt;已保存&lt;/code&gt; 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。&lt;/p&gt;

&lt;h3 id=&quot;5.-离线模式&quot;&gt;5. 离线模式&lt;/h3&gt;

&lt;p&gt;在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。&lt;/p&gt;

&lt;h3 id=&quot;6.-管理工具栏&quot;&gt;6. 管理工具栏&lt;/h3&gt;

&lt;p&gt;为了便于管理您的文稿，在 &lt;strong&gt;预览区&lt;/strong&gt; 的顶部放置了如下所示的 &lt;strong&gt;管理工具栏&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.zybuluo.com/static/img/toolbar-manager.jpg&quot; alt=&quot;tool-manager&quot;&gt;&lt;/p&gt;

&lt;p&gt;通过管理工具栏可以：&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;icon-share&quot;&gt;&lt;/i&gt; 发布：将当前的文稿生成固定链接，在网络上发布，分享
&lt;i class=&quot;icon-file&quot;&gt;&lt;/i&gt; 新建：开始撰写一篇新的文稿
&lt;i class=&quot;icon-trash&quot;&gt;&lt;/i&gt; 删除：删除当前的文稿
&lt;i class=&quot;icon-cloud&quot;&gt;&lt;/i&gt; 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地
&lt;i class=&quot;icon-reorder&quot;&gt;&lt;/i&gt; 列表：所有新增和过往的文稿都可以在这里查看、操作
&lt;i class=&quot;icon-pencil&quot;&gt;&lt;/i&gt; 模式：切换 普通/Vim/Emacs 编辑模式&lt;/p&gt;

&lt;h3 id=&quot;7.-阅读工具栏&quot;&gt;7. 阅读工具栏&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.zybuluo.com/static/img/toolbar-reader.jpg&quot; alt=&quot;tool-manager&quot;&gt;&lt;/p&gt;

&lt;p&gt;通过 &lt;strong&gt;预览区&lt;/strong&gt; 右上角的 &lt;strong&gt;阅读工具栏&lt;/strong&gt;，可以查看当前文稿的目录并增强阅读体验。&lt;/p&gt;

&lt;p&gt;工具栏上的五个图标依次为：&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;icon-list&quot;&gt;&lt;/i&gt; 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落
&lt;i class=&quot;icon-chevron-sign-left&quot;&gt;&lt;/i&gt; 视图：互换左边编辑区和右边预览区的位置
&lt;i class=&quot;icon-adjust&quot;&gt;&lt;/i&gt; 主题：内置了黑白两种模式的主题，试试 &lt;strong&gt;黑色主题&lt;/strong&gt;，超炫！
&lt;i class=&quot;icon-desktop&quot;&gt;&lt;/i&gt; 阅读：心无旁骛的阅读模式提供超一流的阅读体验
&lt;i class=&quot;icon-fullscreen&quot;&gt;&lt;/i&gt; 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境&lt;/p&gt;

&lt;h3 id=&quot;8.-阅读模式&quot;&gt;8. 阅读模式&lt;/h3&gt;

&lt;p&gt;在 &lt;strong&gt;阅读工具栏&lt;/strong&gt; 点击 &lt;i class=&quot;icon-desktop&quot;&gt;&lt;/i&gt; 或者按下 &lt;code&gt;Ctrl+Alt+M&lt;/code&gt; 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。&lt;/p&gt;

&lt;h3 id=&quot;9.-标签、分类和搜索&quot;&gt;9. 标签、分类和搜索&lt;/h3&gt;

&lt;p&gt;在编辑区任意行首位置输入以下格式的文字可以标签当前文档：&lt;/p&gt;

&lt;p&gt;标签： 未分类&lt;/p&gt;

&lt;p&gt;标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.zybuluo.com/static/img/file-list.png&quot; alt=&quot;file-list&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;10.-文稿发布和分享&quot;&gt;10. 文稿发布和分享&lt;/h3&gt;

&lt;p&gt;在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 &lt;i class=&quot;icon-share&quot;&gt;&lt;/i&gt; (Ctrl+Alt+P) 发布这份文档给好友吧！&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;再一次感谢您花费时间阅读这份欢迎稿，点击 &lt;i class=&quot;icon-file&quot;&gt;&lt;/i&gt; (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！&lt;/p&gt;

&lt;p&gt;作者 &lt;a href=&quot;http://weibo.com/ghosert&quot;&gt;@ghosert&lt;/a&gt;&lt;br&gt;
2014 年 07月 07日    &lt;/p&gt;
</description>
      <pubDate>Sun, 03 Aug 2014 00:00:00 +0800</pubDate>
      <link>/blog/man-markdown.html</link>
      <guid isPermaLink="true">/blog/man-markdown.html</guid>
    </item>
    
    <item>
      <title>Git API大全</title>
      <description>&lt;p&gt;收藏一个git api大全的图，很详细，备用。
&lt;img src=&quot;http://talkpower.info/images/posts/git-api.png&quot; alt=&quot;git_api&quot;&gt;&lt;/p&gt;
</description>
      <pubDate>Sun, 03 Aug 2014 00:00:00 +0800</pubDate>
      <link>/blog/git-api.html</link>
      <guid isPermaLink="true">/blog/git-api.html</guid>
    </item>
    
    <item>
      <title>关于算法面试的一些思考</title>
      <description>&lt;p&gt;今天一个前同事在qq跟我聊最近去两家公司面试的经历，他说被打击的不轻。先说说他的经历吧。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一家小公司，面试他的是一位北大的硕士，在学校的时候搞过ACM，公司里的职位是算法工程师。面试题目是让他写一个“&lt;a href=&quot;http://baike.baidu.com/view/1734081.htm&quot;&gt;&lt;strong&gt;蛇形矩阵&lt;/strong&gt;&lt;/a&gt;”算法。说实话，我还真没听说这玩意，搜索了下才发现这东西之前听说过，但是当时叫的名字没有这么专业。这个题目其实是ACM的入门题，俗称水题，送经验的。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;另一家公司是知乎，因为我这位同事是搞python的，所以去知乎挺对口。面试官安排的上机题，两道要求在半个小时内解决掉，题目是这样的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;给你一堆1，2，5，8面值的硬币，然后给你一个面值，用最少的个数的硬币凑出来&lt;/li&gt;
&lt;li&gt;给定一个数组，构建二叉树，并且按层次打印这个二叉树&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;说下同事的结果吧，第一个公司的题目没做出来，面试官说他基础不行，第二家公司也是。他工作有5年多了，非科班出身。之前他的面试经历中机会每次都在算法上吃过亏。跟大多数人一样，他经常抱怨为什么公司都喜欢考这些&lt;strong&gt;没啥用的算法&lt;/strong&gt;来装B，为难应聘者。&lt;/p&gt;

&lt;p&gt;作为朋友，我自然要安慰他。但是我也把一些我认为有道理的观点，拿出来跟他聊了聊。&lt;/p&gt;

&lt;p&gt;拿题目来说，关于蛇形矩阵，让我来做，我也把握不大。但是作为ACM水题，一个合格的程序员也是应该搞定的。水题都是给菜鸟增加信心用的，连最基本的搞不定，你还好意思说懂点算法，学过算法吗？所以面试官出的这题，挺好，不难但考察基本算法和编码素质。搞不定的，可以面壁去了。。。&lt;/p&gt;

&lt;p&gt;知乎的第一个题，任何一本算法教材，关于动态规划章节里，基本都是当例题来讲，反正不是例题就是习题。这也就是说只要正经上过算法和数据结构课的朋友，凡是搞不定的，真心对不住自己科班的身份。第二题不说了，例题，习题，考试题，都不知道见过多少次了吧。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“我是半路出家的呀，没上过这些课，这是在难为我。”&lt;/em&gt;&lt;/strong&gt; 同事说。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我这么跟他解释，人家科班生学了四年的专业课程，对于我们这些半路出家的业余选手，凭什么来抢人家的饭碗？竞争需要有资本。如果想跟他们站在一起PK，我们需要的付出更多的努力去学习，所谓的&amp;quot;&lt;strong&gt;&lt;em&gt;学习&lt;/em&gt;&lt;/strong&gt;&amp;quot;说得不好听点就是在补习，补习你没有学过，落下的基础课程。&lt;/p&gt;

&lt;p&gt;面试官考查算法一点也不过分，算法与数据结构是基本课程，考你如何造原子弹，你不会没问题，因为没学过嘛，别人考你一些你学过的课程，怎么就过分了？&lt;/p&gt;

&lt;p&gt;其次，程序员主要工作就是码代码，通过去实现一个算法和数据结构，面试官可以很好的评估你的编码能力，通过编程解决一些算法问题的方式，哪里不妥吗？难道让你把工作中的项目代码，在他面前写一写？面试官真这么做，你可以去告他了，这是赤裸裸的窃取商业机密的行为。。。所以，在面试官考察完你的领域专业技能和基本知识之后，通过算法考查一下解决问题和编码实现的能力，是非常合理的行为，没什么好抱怨的，有那个抱怨的时间，不如回家补补基础，码点代码。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;说了这么多，也不知道同事是否同意我的这些观点，他只是发了一个叹气的表情，然后就下线了。&lt;/p&gt;
</description>
      <pubDate>Sun, 03 Aug 2014 00:00:00 +0800</pubDate>
      <link>/blog/algorithm.html</link>
      <guid isPermaLink="true">/blog/algorithm.html</guid>
    </item>
    
    <item>
      <title>Python title()中文标题支持</title>
      <description>&lt;p&gt;在调试&lt;a href=&quot;http://yuanyong.org/pcvwithpython/&quot;&gt;《Programming Computer Vision with Python》&lt;/a&gt;中的代码时，对于图显示的标题，一直都是用英文标识的。Matplotlib这货默认不支持中文，上星期在&lt;code&gt;title()&lt;/code&gt;中用中文标识时，蹦出一黑黑的屏和一堆错误，当时本小子正忙着折腾别的，由于标题部分不长，不影响美观，就直接用英文把问题给绕开了。&lt;/p&gt;

&lt;p&gt;绕过去的弯，总是要换还的。晚上看着图上英文标识的一长串英文，几乎每个英文标题都快超出了subplot的宽度。对于一个排版重度患者，看着真心捉急。于是，放狗一搜，竟然很快就找到答案了，也不知道上次肿么了，搜半天找到的全是要修改matplotlibrc配置文件。对于一个要分享给别人测试实验的代码，要别人在他的PC上修改配置文件，总不是一件明智的选择，况且这本书里的一些配置已经很麻烦了。&lt;/p&gt;

&lt;p&gt;根据搜到的答案，完全可以不用修改配置文件，而直接在python脚本的开头加上下面的代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.font_manager&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FontProperties&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FontProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;quot;c:\windows\fonts\SimSun.ttc&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面从&lt;code&gt;matplotlib.font_manager&lt;/code&gt;字体管理模块代入&lt;code&gt;FontProperties&lt;/code&gt;,然后设置字体属性，&lt;code&gt;FontProperties()&lt;/code&gt;设置的是Windows系统自带的宋体。关于Windows字体列表，可以查阅WIKI &lt;a href=&quot;http://zh.wikipedia.org/wiki/Microsoft_Windows%E5%AD%97%E9%AB%94%E5%88%97%E8%A1%A8&quot;&gt;Windows字体列表&lt;/a&gt;，&lt;code&gt;size&lt;/code&gt;设置的是字体的大小。对于上面Matplotlib绘图中文显示，举个今晚调试好了的例子，本例也可以参见&lt;a href=&quot;http://yuanyong.org/pcvwithpython/&quot;&gt;《Python计算机视觉编程》&lt;/a&gt;的第一章&lt;a href=&quot;http://yuanyong.org/pcvwithpython/chapter1.html&quot;&gt;图像处理基础&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PIL&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pylab&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 添加中文字体支持&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.font_manager&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FontProperties&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FontProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;quot;c:\windows\fonts\SimSun.ttc&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pil_im&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;../data/empire.jpg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;121&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u&amp;#39;原图&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fontproperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;off&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pil_im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pil_im&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;../data/empire.jpg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;L&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;122&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u&amp;#39;灰度图&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fontproperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;off&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pil_im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面代码&lt;code&gt;title()&lt;/code&gt;中，字体属性&lt;code&gt;fontproperties=font&lt;/code&gt;,即开头已经设置好了的字体属性，需要注意的是中文标识前有个字母&lt;strong&gt;u&lt;/strong&gt;,这个不能少，否则会出错。&lt;/p&gt;
</description>
      <pubDate>Sat, 02 Aug 2014 00:00:00 +0800</pubDate>
      <link>/blog/test_page.html</link>
      <guid isPermaLink="true">/blog/test_page.html</guid>
    </item>
    
  </channel>
</rss>
